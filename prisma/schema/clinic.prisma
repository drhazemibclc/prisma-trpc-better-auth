model Todo {
  id        Int     @id @default(autoincrement())
  text      String
  completed Boolean @default(false)

  @@map("todo")
}


enum Role {
  ADMIN
  PATIENT
  NURSE
  DOCTOR
}

enum Status {
  ACTIVE
  INACTIVE
  DORMANT
}

enum JOBTYPE {
  FULL
  PART
}

enum Gender {
  BOY
  GIRL
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum PaymentMethod {
  CASH
  CARD
}

enum PaymentStatus {
  PAID
  UNPAID
  PART
}

model Patient {
  id                     String               @id //clerk userId
  firstName              String               @map("first_name")
  lastName               String               @map("last_name")
  dateOfBirth            DateTime             @map("date_of_birth")
  gender                 Gender               @default(BOY)
  phone                  String
  email                  String               @unique
  nutritionalStatus      String?              @map("nutritional_status")
  address                String
  emergencyContactName   String               @map("emergency_contact_name")
  emergencyContactNumber String               @map("emergency_contact_number")
  relation               String
  bloodGroup             String?              @map("blood_group")
  allergies              String?
  medicalConditions      String?
  medicalHistory         String?              @map("medical_history")
  role                   Role?                @default(PATIENT)
  growthRecords          GrowthRecord[]
  immunizations          Immunization[]
  developmentalChecks    DevelopmentalCheck[]
  img                    String?
  colorCode              String?
  // Useful for demographic queries

  appointments Appointment[]
  medical      MedicalRecord[]
  payments     Payment[]
  ratings      Rating[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([email])
  @@index([phone])
  @@index([dateOfBirth, gender])
  @@map("patient")
}

model Doctor {
  id                 String  @id
  email              String  @unique
  name               String
  specialization     String
  licenseNumber      String  @map("license_number")
  phone              String
  role               Role?   @default(DOCTOR)
  address            String
  department         String?
  img                String?
  colorCode          String?
  availabilityStatus String?

  type         JOBTYPE       @default(FULL)
  workingDays  WorkingDays[]
  appointments Appointment[]
  ratings      Rating[]
  diagnosis    Diagnosis[]
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")

  @@index([specialization])
  @@index([email])
  @@map("doctor")
}

model WorkingDays {
  id        Int    @id @default(autoincrement())
  doctorId  String @map("doctor_id")
  day       String
  startTime String @map("start_time")
  closeTime String @map("close_time")

  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("working_days")
}

model Staff {
  id            String  @id
  email         String  @unique
  name          String
  phone         String
  address       String
  department    String?
  img           String?
  licenseNumber String?
  colorCode     String?

  role   Role   @default(NURSE)
  status Status @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map("staff")
}

model Appointment {
  id              Int               @id @default(autoincrement())
  patientId       String            @map("patient_id")
  doctorId        String            @map("doctor_id")
  appointmentDate DateTime          @map("appointment_date")
  time            String
  status          AppointmentStatus @default(PENDING)
  type            String
  note            String?
  patient         Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor          Doctor            @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  bills   Payment[]
  medical MedicalRecord[]

  reason    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  // For doctor's schedule
  @@index([appointmentDate, status])
  @@index([patientId, doctorId])
  @@index([doctorId, appointmentDate])
  @@map("appointment")
}

model Payment {
  id            Int      @id @default(autoincrement())
  billId        Int?     @map("bill_id")
  patientId     String   @map("patient_id")
  appointmentId Int      @unique @map("appointment_id")
  billDate      DateTime @map("bill_date")
  paymentDate   DateTime @map("payment_date")
  discount      Float
  totalAmount   Float    @map("total_amount")
  amountPaid    Float    @map("amount_paid")

  paymentMethod PaymentMethod @default(CASH) @map("payment_method")
  status        PaymentStatus @default(UNPAID)
  receiptNumber Int           @map("receipt_number")

  appointment Appointment    @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  patient     Patient        @relation(fields: [patientId], references: [id], onDelete: Cascade)
  bills       PatientBills[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([patientId, status])
  @@index([paymentDate])
  @@map("payment")
}

model PatientBills {

  id          Int      @id @default(autoincrement())
  billId      Int      @map("bill_id")
  serviceId   Int      @map("service_id")
  serviceDate DateTime @map("service_date")
  quantity    Int
  unitCost    Float    @map("unit_cost")
  totalCost   Float    @map("total_cost")
  service     Services @relation(fields: [serviceId], references: [id])
  payment     Payment  @relation(fields: [billId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("patient_bill")
}

model LabTest {
  id        Int      @id @default(autoincrement())
  recordId  Int      @map("record_id")
  testDate  DateTime @map("test_date")
  result    String
  status    String
  notes     String?
  serviceId Int      @unique @map("service_id")
  services  Services @relation(fields: [serviceId], references: [id])

  medical_record MedicalRecord @relation(fields: [recordId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("lab_test")
}

model MedicalRecord {
  id            Int     @id @default(autoincrement())
  patientId     String  @map("patient_id")
  appointmentId Int     @map("appointment_id")
  doctorId      String  @map("doctor_id")
  treatmentPlan String? @map("treatment_plan")
  prescriptions String?
  labRequest    String? @map("lab_request")

  appointment Appointment  @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  patient     Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  labTest     LabTest[]
  notes       String?
  vitalSigns  VitalSigns[]
  diagnosis   Diagnosis[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([patientId, createdAt])
  @@map("medical_record")
}

model VitalSigns {
  id               Int            @id @default(autoincrement())
  patientId        String         @map("patient_id")
  medicalId        Int            @map("medical_id")
  medical          MedicalRecord @relation(fields: [medicalId], references: [id], onDelete: Cascade)
  bodyTemperature  Float          @map("body_temperature")
  heartRate        String         @map("heart_rate")
  respiratoryRate  Int?           @map("respiratory_rate")
  oxygenSaturation Int?           @map("oxygen_saturation")
  weight           Float
  height           Float
  others           String?        @map("others")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  @@map("vital_signs")
}

model Diagnosis {
  id                    Int     @id @default(autoincrement())
  patientId             String  @map("patient_id")
  medicalId             Int
  doctorId              String
  doctor                Doctor  @relation(fields: [doctorId], references: [id])
  symptoms              String
  diagnosis             String
  notes                 String?
  prescribedMedications String?
  followUpPlan          String? @map("follow_up_plan")

  medical MedicalRecord @relation(fields: [medicalId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("diagnosis")
}

model AuditLog {
  id       Int     @id @default(autoincrement())
  userId   String  @map("user_id")
  recordId String  @map("record_id")
  action   String
  details  String?
  model    String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("audit_log")
}

model Rating {
  id        Int      @id @default(autoincrement())
  staffId   String?  @map("staff_id")
  patientId String?  @map("patient_id")
  rating    Int
  comment   String?
  doctor    Doctor?  @relation(fields: [staffId], references: [id], onDelete: Cascade)
  patient   Patient? @relation(fields: [patientId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("rating")
}

model Services {
  id          Int            @id @default(autoincrement())
  serviceName String         @map("service_name")
  description String
  price       Float
  labtest     LabTest?
  bills       PatientBills[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  @@map("service")
}

enum DevelopmentStatus {
  NORMAL
  DELAYED
  ADVANCED
  CONCERNING
}

enum ImmunizationStatus {
  COMPLETED
  PENDING
  DELAYED
  EXEMPTED
}

model GrowthRecord {
  id                Int      @id @default(autoincrement())
  patientId         String   @map("patient_id")
  date              DateTime
  gender            Gender
  ageDays           Int // Added for precise age tracking @map("age_days")
  ageMonths         Int      @map("age_months")
  weight            Float // in kg
  height            Float // in cm
  headCircumference Float? // in cm    @map("head_circumference")
  bmi               Float?
  weightForAgeZ     Float?   @map("weight_for_age_z")
  heightForAgeZ     Float?   @map("height_for_age_z")
  bmiForAgeZ        Float?   @map("bmi_for_age_z")
  hcForAgeZ         Float? // head circumference z-score @map("hc_for_age_z")
  notes             String?
  patient           Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  // Added for efficient WHO data comparison
  @@index([patientId, date])
  @@index([patientId, ageDays])
  @@index([ageDays, gender])
  @@map("growth_record")
}

model WHOGrowthStandard {
  id              Int      @id @default(autoincrement())
  gender          Gender
  ageDays         Int // Changed from age_months to age_days for more precise tracking
  measurementType String // weight_for_age, height_for_age, etc.
  lValue          Float // Box-Cox transformation power
  mValue          Float // median (SD0)
  sValue          Float // coefficient of variation
  sd4neg          Float? // -4 SD value
  sd3neg          Float // -3 SD value
  sd2neg          Float // -2 SD value
  sd1neg          Float // -1 SD value
  sd0             Float // median value (same as m_value)
  sd1pos          Float // +1 SD value
  sd2pos          Float // +2 SD value
  sd3pos          Float // +3 SD value
  sd4pos          Float? // +4 SD value
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  // Optimized index for lookups
  @@unique([gender, ageDays, measurementType])
  @@index([gender, ageDays, measurementType])
}

model Immunization {
  id               Int                @id @default(autoincrement())
  patientId        String             @map("pediatric_patient_id")
  vaccineName      String             @map("vaccine_name")
  doseNumber       Int                @map("dose_number")
  dateAdministered DateTime           @map("date_administered")
  administeredBy   String?            @map("administered_by")
  batchNumber      String?            @map("batch_number")
  expiryDate       DateTime?          @map("expiry_date")
  site             String? // e.g., left arm, right thigh
  status           ImmunizationStatus @default(COMPLETED)
  nextDueDate      DateTime?          @map("next_due_date")
  notes            String?
  patient          Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")

  @@index([patientId, vaccineName])
  @@index([nextDueDate, status])
  @@map("immunization")
}

model DevelopmentalCheck {
  id                Int               @id @default(autoincrement())
  patientId         String
  checkDate         DateTime
  ageMonths         Int
  motorSkills       DevelopmentStatus
  languageSkills    DevelopmentStatus
  socialSkills      DevelopmentStatus
  cognitiveSkills   DevelopmentStatus
  milestonesMet     String?
  milestonesPending String?
  concerns          String?
  recommendations   String?
  patient           Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  createdAt         DateTime          @default(now()) @map("createdAt")
  updatedAt         DateTime          @updatedAt @map("updatedAt")

  @@index([patientId, checkDate])
  @@index([ageMonths])
  @@map("developmental_check")
}

model VaccineSchedule {
  id              Int      @id @default(autoincrement())
  vaccineName     String   @map("vaccine_name")
  recommendedAge  String // e.g., "2 months", "4-6 years" @map("recommended_age")
  dosesRequired   Int      @map("doses_required")
  minimumInterval Int? // minimum days between doses @map("minimum_interval")
  isMandatory     Boolean  @default(true) @map("is_mandatory")
  description     String?
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  @@unique([vaccineName, recommendedAge])
  @@map("vaccine_schedule")
}
